/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "tema.h"
#include "token.h"

map<string, vector<struct resourcesPerm>> approvals;

char *generate_access_token(char *clientIdToken);

char **
request_authorization_1_svc(char **argp, struct svc_req *rqstp)
{
	static char *result;
	bool found = false;
	result = (char *)malloc(50);

	printf("BEGIN %s AUTHZ\n", *argp);
	for (int i = 0; i < users.size(); i++)
	{
		if (strcmp(users[i].userId, *argp) == 0)
		{
			strcpy(result, generate_access_token(*argp));
			strcpy(users[i].tokens.accessToken, result);
			found = true;
		}
	}
	if (!found)
	{
		strcpy(result, "USER_NOT_FOUND");
	}
	else
	{
		string line, token, resource, permissions;
		if (!getline(inputFile4, line, '\n'))
		{
			return &result;
		}
		else
		{
			istringstream lineStream(line);
			int i = 2;
			vector<struct resourcesPerm> perms;
			while (getline(lineStream, token, ','))
			{
				switch (i % 2)
				{
				case 0:
					resource = token;
					break;
				case 1:
					permissions = token;
					struct resourcesPerm rp;
					rp.resource = (char *)malloc(50);
					rp.permissions = (char *)malloc(50);
					strcpy(rp.resource, resource.c_str());
					strcpy(rp.permissions, permissions.c_str());
					perms.push_back(rp);
					break;
				default:
					break;
				}
				i++;
			}
			string key(result);
			approvals[key] = perms;
			printf("  RequestToken = %s\n", result);
		}
	}
	// cout << "-----------------------------";
	// for (const auto &entry : approvals)
	// {
	// 	const string &key = entry.first;
	// 	const vector<resourcesPerm> &value = entry.second;

	// 	cout << "Key: " << key << ", Values: ";

	// 	for (const auto &perm : value)
	// 	{
	// 		cout << perm.resource << " " << perm.permissions << " ";
	// 	}

	// 	cout << endl;
	// }
	return &result;
}

struct tokensPair *
request_access_token_1_svc(struct userPair *argp, struct svc_req *rqstp)
{
	static struct tokensPair result;
	result.accessToken = (char *)malloc(50);
	result.refreshToken = (char *)malloc(50);
	result.error = (char *)malloc(50);

	for (int i = 0; i < users.size(); i++)
	{
		if (strcmp(users[i].tokens.accessToken, argp->accessToken) == 0)
		{
			if (users[i].validatedToken == true)
			{
				users[i].tokens.refreshToken = (char *)malloc(50);
				char *refreshToken = (char *)malloc(50);
				strcpy(refreshToken, generate_access_token(argp->accessToken));
				strcpy(users[i].tokens.accessToken, argp->accessToken);
				strcpy(users[i].tokens.refreshToken, refreshToken);
				users[i].tokens.valability = valability;
				result.valability = valability;

				strcpy(result.accessToken, argp->accessToken);
				strcpy(result.refreshToken, refreshToken);
				printf("  AccessToken = %s\n", result.refreshToken);
				free(refreshToken);
				break;
			}
			else
			{
				strcpy(result.error, "REQUEST_DENIED");
			}
		}
	}

	return &result;
}

char **
validate_delegated_action_1_svc(struct handleResource *argp, struct svc_req *rqstp)
{
	static char *result;
	result = (char *)malloc(50);
	strcpy(result, "\0");
	bool found = false;
	int valability = 0;
	char refreshToken[50];

	for (int i = 0; i < users.size(); i++)
	{
		bool ok = false;
		if (strcmp(users[i].tokens.accessToken, argp->accessToken) == 0)
		{
			strcpy(refreshToken, users[i].tokens.refreshToken);
			found = true;
			if (users[i].validatedToken == true)
			{
				if (users[i].tokens.valability == 0)
				{
					printf("DENY (%s,%s,%s,%d)\n", argp->operation, argp->resource, valability==0?"":refreshToken, users[i].tokens.valability);
					strcpy(result, "TOKEN_EXPIRED");
					break;
				}
				else
				{
					string res(argp->resource);
					vector<string>::iterator it;
					it = find(resources.begin(), resources.end(), res);
					if (it != resources.end())
					{
						for (int j = 0; j < approvals[argp->accessToken].size(); j++)
						{
							if (strcmp(approvals[argp->accessToken][j].resource, argp->resource) == 0)
							{
								string perms(approvals[argp->accessToken][j].permissions);
								string op(argp->operation);
								if (perms.find(op.at(strcmp(argp->operation, "EXECUTE") == 0 ? 1 : 0)) != string::npos)
								{
									users[i].tokens.valability--;
									valability = users[i].tokens.valability;
									printf("PERMIT (%s,%s,%s,%d)\n", argp->operation, argp->resource, refreshToken, users[i].tokens.valability);
									strcpy(result, "PERMISSION_GRANTED");
									ok = true;
									break;
								}
								else
								{
									users[i].tokens.valability--;
									valability = users[i].tokens.valability;
									printf("DENY (%s,%s,%s,%d)\n", argp->operation, argp->resource, refreshToken, users[i].tokens.valability);
									strcpy(result, "OPERATION_NOT_PERMITTED");
									ok = true;
									break;
								}
							}
						}
						if (ok)
						{
							break;
						}
					}
					else
					{
						users[i].tokens.valability--;
						valability = users[i].tokens.valability;
						printf("DENY (%s,%s,%s,%d)\n", argp->operation, argp->resource, valability==0?"":refreshToken, users[i].tokens.valability);
						strcpy(result, "RESOURCE_NOT_FOUND");
						break;
					}
				}
			}
		}
	}
	if (found == false)
	{
		printf("DENY (%s,%s,%s,%d)\n", argp->operation, argp->resource, valability==0?"":refreshToken, valability);
		strcpy(result, "PERMISSION_DENIED");
	}
	else if (strlen(result) == 0)
	{
		for (int i = 0; i < users.size(); i++)
		{
			if (strcmp(users[i].tokens.accessToken, argp->accessToken) == 0)
			{
				users[i].tokens.valability--;
				valability = users[i].tokens.valability;
			}
		}
		printf("DENY (%s,%s,%s,%d)\n", argp->operation, argp->resource, refreshToken, valability);
		strcpy(result, "OPERATION_NOT_PERMITTED");
	}

	return &result;
}

char **
approve_request_token_1_svc(char **argp, struct svc_req *rqstp)
{
	static char *result;
	result = (char *)malloc(50);
	bool found = false;

	for (auto entry : approvals)
	{
		string key(entry.first);
		const vector<resourcesPerm> value = entry.second;
		string s(*argp);
		if (s == key && strcmp(value[0].resource, "*") == 0 && strcmp(value[0].permissions, "-") == 0)
		{
			for (int j = 0; j < users.size(); j++)
			{
				if (strcmp(users[j].tokens.accessToken, *argp) == 0)
				{
					users[j].validatedToken = false;
					found = true;
					break;
				}
			}
		}
		if (found)
		{
			break;
		}
	}
	if (!found)
	{
		for (int j = 0; j < users.size(); j++)
		{
			if (strcmp(users[j].tokens.accessToken, *argp) == 0)
			{
				users[j].validatedToken = true;
				break;
			}
		}
	}
	strcpy(result, *argp);

	return &result;
}
