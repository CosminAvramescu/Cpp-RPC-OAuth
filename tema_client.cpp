/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "tema.h"

map<string, string> userData;

void oauth_1(char *host, char *clientFile)
{
	CLIENT *clnt;
	char **result_1;
	char *request_authorization_1_arg;
	struct tokensPair *result_2;
	struct userPair request_access_token_1_arg;
	char **result_3;
	struct handleResource validate_delegated_action_1_arg;
	char **result_4;
	char *approve_request_token_1_arg;

#ifndef DEBUG
	clnt = clnt_create(host, OAUTH, OAUTHVERS, "udp");
	if (clnt == NULL)
	{
		clnt_pcreateerror(host);
		exit(1);
	}
#endif /* DEBUG */
	ifstream inputFile(clientFile);

	if (!inputFile.is_open())
	{
		cout << "erorr at opening file!";
	}

	string line, token, userId, operation, resource;
	while (getline(inputFile, line, '\n'))
	{
		int i = 3;
		istringstream lineStream(line);
		while (getline(lineStream, token, ','))
		{
			switch (i % 3)
			{
			case 0:
				userId = token;
				break;
			case 1:
				operation = token;
				break;
			case 2:
				resource = token;
				break;
			default:
				break;
			}
			i++;
		}

		if (operation == "REQUEST")
		{
			if (stoi(resource) == 0)
			{
				// AUTHORIZE
				request_authorization_1_arg = (char *)malloc(50);
				strcpy(request_authorization_1_arg, userId.c_str());
				result_1 = request_authorization_1(&request_authorization_1_arg, clnt);

				if (result_1 == (char **)NULL)
				{
					clnt_perror(clnt, "call failed");
				}

				// APPROVE
				approve_request_token_1_arg = (char *)malloc(50);
				strcpy(approve_request_token_1_arg, *result_1);
				result_4 = approve_request_token_1(&approve_request_token_1_arg, clnt);
				if (result_4 == (char **)NULL)
				{
					clnt_perror(clnt, "call failed");
				}

				// ACCESS
				request_access_token_1_arg.userId = (char *)malloc(50);
				strcpy(request_access_token_1_arg.userId, userId.c_str());
				request_access_token_1_arg.requestToken = (char *)malloc(50);
				strcpy(request_access_token_1_arg.requestToken, *result_1);

				result_2 = request_access_token_1(&request_access_token_1_arg, clnt);
				if (result_2 == (struct tokensPair *)NULL)
				{
					clnt_perror(clnt, "call failed");
				}

				if (strcmp(*result_1, "USER_NOT_FOUND") == 0)
				{
					printf("%s\n", *result_1);
				}
				else
				{
					string accT((*result_2).accessToken);
					userData[userId]=accT;
					if (strcmp(result_2->error, "REQUEST_DENIED") == 0)
					{
						printf("%s\n", result_2->error);
					}
					else
					{
						printf("%s", *result_1);
						printf(" -> %s\n", result_2->accessToken);
					}
				}

				free(request_authorization_1_arg);
				free(approve_request_token_1_arg);
				free(request_access_token_1_arg.userId);
				free(request_access_token_1_arg.requestToken);
				free(*result_1);
				free(result_2->accessToken);
				free(result_2->refreshToken);
				free(result_2->error);
				free(*result_4);
			}
			else if (stoi(resource) == 1)
			{
				// AUTHORIZE
				request_authorization_1_arg = (char *)malloc(50);
				strcpy(request_authorization_1_arg, userId.c_str());
				result_1 = request_authorization_1(&request_authorization_1_arg, clnt);

				if (result_1 == (char **)NULL)
				{
					clnt_perror(clnt, "call failed");
				}

				// APPROVE
				approve_request_token_1_arg = (char *)malloc(50);
				strcpy(approve_request_token_1_arg, *result_1);
				result_4 = approve_request_token_1(&approve_request_token_1_arg, clnt);
				if (result_4 == (char **)NULL)
				{
					clnt_perror(clnt, "call failed");
				}

				// ACCESS
				request_access_token_1_arg.userId = (char *)malloc(50);
				strcpy(request_access_token_1_arg.userId, userId.c_str());
				request_access_token_1_arg.requestToken = (char *)malloc(50);
				strcpy(request_access_token_1_arg.requestToken, *result_1);

				result_2 = request_access_token_1(&request_access_token_1_arg, clnt);
				if (result_2 == (struct tokensPair *)NULL)
				{
					clnt_perror(clnt, "call failed");
				}

				if (strcmp(*result_1, "USER_NOT_FOUND") == 0)
				{
					printf("%s\n", *result_1);
				}
				else
				{
					string accT((*result_2).accessToken);
					userData[userId]=accT;
					if (strcmp(result_2->error, "REQUEST_DENIED") == 0)
					{
						printf("%s\n", result_2->error);
					}
					else
					{
						printf("%s", *result_1);
						printf(" -> %s\n", result_2->accessToken);
					}
				}

				free(request_authorization_1_arg);
				free(approve_request_token_1_arg);
				free(request_access_token_1_arg.userId);
				free(request_access_token_1_arg.requestToken);
				free(*result_1);
				free(result_2->accessToken);
				free(result_2->refreshToken);
				free(result_2->error);
				free(*result_4);
			}
		}
		else
		{
			validate_delegated_action_1_arg.accessToken = (char *)malloc(50);
			validate_delegated_action_1_arg.operation = (char *)malloc(50);
			validate_delegated_action_1_arg.resource = (char *)malloc(50);
			strcpy(validate_delegated_action_1_arg.accessToken, userData[userId].c_str());
			strcpy(validate_delegated_action_1_arg.resource, resource.c_str());
			strcpy(validate_delegated_action_1_arg.operation, operation.c_str());

			result_3 = validate_delegated_action_1(&validate_delegated_action_1_arg, clnt);
			if (result_3 == (char **)NULL)
			{
				clnt_perror(clnt, "call failed");
			}
			printf("%s\n", *result_3);

			free(validate_delegated_action_1_arg.accessToken);
			free(validate_delegated_action_1_arg.operation);
			free(validate_delegated_action_1_arg.resource);
		}
	}
	inputFile.close();
#ifndef DEBUG
	clnt_destroy(clnt);
#endif /* DEBUG */
}

int main(int argc, char *argv[])
{
	char *host, *clientFile;

	if (argc < 2)
	{
		printf("usage: %s server_host\n", argv[0]);
		exit(1);
	}
	host = (char *)malloc(50);
	clientFile = (char *)malloc(50);
	strcpy(host, argv[1]);
	strcpy(clientFile, argv[2]);

	oauth_1(host, clientFile);
	exit(0);
}